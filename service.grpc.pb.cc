// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* FaceRecognitionService_method_names[] = {
  "/FaceRecognitionService/DetectFaces",
  "/FaceRecognitionService/RecognizeFaces",
};

std::unique_ptr< FaceRecognitionService::Stub> FaceRecognitionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaceRecognitionService::Stub> stub(new FaceRecognitionService::Stub(channel, options));
  return stub;
}

FaceRecognitionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DetectFaces_(FaceRecognitionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecognizeFaces_(FaceRecognitionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FaceRecognitionService::Stub::DetectFaces(::grpc::ClientContext* context, const ::DetectFacesRequest& request, ::DetectFacesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DetectFacesRequest, ::DetectFacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DetectFaces_, context, request, response);
}

void FaceRecognitionService::Stub::async::DetectFaces(::grpc::ClientContext* context, const ::DetectFacesRequest* request, ::DetectFacesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DetectFacesRequest, ::DetectFacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectFaces_, context, request, response, std::move(f));
}

void FaceRecognitionService::Stub::async::DetectFaces(::grpc::ClientContext* context, const ::DetectFacesRequest* request, ::DetectFacesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetectFaces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DetectFacesResponse>* FaceRecognitionService::Stub::PrepareAsyncDetectFacesRaw(::grpc::ClientContext* context, const ::DetectFacesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DetectFacesResponse, ::DetectFacesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DetectFaces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DetectFacesResponse>* FaceRecognitionService::Stub::AsyncDetectFacesRaw(::grpc::ClientContext* context, const ::DetectFacesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDetectFacesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FaceRecognitionService::Stub::RecognizeFaces(::grpc::ClientContext* context, const ::RecognizeFacesRequest& request, ::RecognizeFacesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RecognizeFacesRequest, ::RecognizeFacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecognizeFaces_, context, request, response);
}

void FaceRecognitionService::Stub::async::RecognizeFaces(::grpc::ClientContext* context, const ::RecognizeFacesRequest* request, ::RecognizeFacesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RecognizeFacesRequest, ::RecognizeFacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecognizeFaces_, context, request, response, std::move(f));
}

void FaceRecognitionService::Stub::async::RecognizeFaces(::grpc::ClientContext* context, const ::RecognizeFacesRequest* request, ::RecognizeFacesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecognizeFaces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RecognizeFacesResponse>* FaceRecognitionService::Stub::PrepareAsyncRecognizeFacesRaw(::grpc::ClientContext* context, const ::RecognizeFacesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RecognizeFacesResponse, ::RecognizeFacesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecognizeFaces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RecognizeFacesResponse>* FaceRecognitionService::Stub::AsyncRecognizeFacesRaw(::grpc::ClientContext* context, const ::RecognizeFacesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecognizeFacesRaw(context, request, cq);
  result->StartCall();
  return result;
}

FaceRecognitionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognitionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognitionService::Service, ::DetectFacesRequest, ::DetectFacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaceRecognitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DetectFacesRequest* req,
             ::DetectFacesResponse* resp) {
               return service->DetectFaces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecognitionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecognitionService::Service, ::RecognizeFacesRequest, ::RecognizeFacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaceRecognitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RecognizeFacesRequest* req,
             ::RecognizeFacesResponse* resp) {
               return service->RecognizeFaces(ctx, req, resp);
             }, this)));
}

FaceRecognitionService::Service::~Service() {
}

::grpc::Status FaceRecognitionService::Service::DetectFaces(::grpc::ServerContext* context, const ::DetectFacesRequest* request, ::DetectFacesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecognitionService::Service::RecognizeFaces(::grpc::ServerContext* context, const ::RecognizeFacesRequest* request, ::RecognizeFacesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


