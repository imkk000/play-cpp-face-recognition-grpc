// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR RecognizeFacesRequest_Face::RecognizeFacesRequest_Face(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.landmarks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecognizeFacesRequest_FaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecognizeFacesRequest_FaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecognizeFacesRequest_FaceDefaultTypeInternal() {}
  union {
    RecognizeFacesRequest_Face _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecognizeFacesRequest_FaceDefaultTypeInternal _RecognizeFacesRequest_Face_default_instance_;
PROTOBUF_CONSTEXPR RecognizeFacesRequest::RecognizeFacesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.faces_)*/{}
  , /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecognizeFacesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecognizeFacesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecognizeFacesRequestDefaultTypeInternal() {}
  union {
    RecognizeFacesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecognizeFacesRequestDefaultTypeInternal _RecognizeFacesRequest_default_instance_;
PROTOBUF_CONSTEXPR RecognizeFacesResponse::RecognizeFacesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.valid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecognizeFacesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecognizeFacesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecognizeFacesResponseDefaultTypeInternal() {}
  union {
    RecognizeFacesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecognizeFacesResponseDefaultTypeInternal _RecognizeFacesResponse_default_instance_;
PROTOBUF_CONSTEXPR DetectFacesRequest::DetectFacesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.images_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectFacesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectFacesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectFacesRequestDefaultTypeInternal() {}
  union {
    DetectFacesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectFacesRequestDefaultTypeInternal _DetectFacesRequest_default_instance_;
PROTOBUF_CONSTEXPR DetectFacesResponse_Face::DetectFacesResponse_Face(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.landmarks_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectFacesResponse_FaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectFacesResponse_FaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectFacesResponse_FaceDefaultTypeInternal() {}
  union {
    DetectFacesResponse_Face _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectFacesResponse_FaceDefaultTypeInternal _DetectFacesResponse_Face_default_instance_;
PROTOBUF_CONSTEXPR DetectFacesResponse::DetectFacesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.faces_)*/{}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectFacesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectFacesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectFacesResponseDefaultTypeInternal() {}
  union {
    DetectFacesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectFacesResponseDefaultTypeInternal _DetectFacesResponse_default_instance_;
PROTOBUF_CONSTEXPR DetectFaceStatus::DetectFaceStatus(
    ::_pbi::ConstantInitialized) {}
struct DetectFaceStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectFaceStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectFaceStatusDefaultTypeInternal() {}
  union {
    DetectFaceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectFaceStatusDefaultTypeInternal _DetectFaceStatus_default_instance_;
static ::_pb::Metadata file_level_metadata_service_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_service_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2eproto = nullptr;

const uint32_t TableStruct_service_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RecognizeFacesRequest_Face, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RecognizeFacesRequest_Face, _impl_.landmarks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RecognizeFacesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RecognizeFacesRequest, _impl_.faces_),
  PROTOBUF_FIELD_OFFSET(::RecognizeFacesRequest, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RecognizeFacesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RecognizeFacesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::RecognizeFacesResponse, _impl_.valid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectFacesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DetectFacesRequest, _impl_.images_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse_Face, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse_Face, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse_Face, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse_Face, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse_Face, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse_Face, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse_Face, _impl_.landmarks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::DetectFacesResponse, _impl_.faces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectFaceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RecognizeFacesRequest_Face)},
  { 7, -1, -1, sizeof(::RecognizeFacesRequest)},
  { 15, -1, -1, sizeof(::RecognizeFacesResponse)},
  { 23, -1, -1, sizeof(::DetectFacesRequest)},
  { 30, -1, -1, sizeof(::DetectFacesResponse_Face)},
  { 42, -1, -1, sizeof(::DetectFacesResponse)},
  { 50, -1, -1, sizeof(::DetectFaceStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_RecognizeFacesRequest_Face_default_instance_._instance,
  &::_RecognizeFacesRequest_default_instance_._instance,
  &::_RecognizeFacesResponse_default_instance_._instance,
  &::_DetectFacesRequest_default_instance_._instance,
  &::_DetectFacesResponse_Face_default_instance_._instance,
  &::_DetectFacesResponse_default_instance_._instance,
  &::_DetectFaceStatus_default_instance_._instance,
};

const char descriptor_table_protodef_service_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rservice.proto\"m\n\025RecognizeFacesRequest"
  "\022*\n\005faces\030\001 \003(\0132\033.RecognizeFacesRequest."
  "Face\022\r\n\005image\030\002 \001(\014\032\031\n\004Face\022\021\n\tlandmarks"
  "\030\001 \003(\002\"O\n\026RecognizeFacesResponse\022&\n\006stat"
  "us\030\001 \001(\0162\026.DetectFaceStatus.Enum\022\r\n\005vali"
  "d\030\002 \001(\010\"$\n\022DetectFacesRequest\022\016\n\006images\030"
  "\001 \003(\014\"\313\001\n\023DetectFacesResponse\022&\n\006status\030"
  "\001 \001(\0162\026.DetectFaceStatus.Enum\022(\n\005faces\030\002"
  " \003(\0132\031.DetectFacesResponse.Face\032b\n\004Face\022"
  "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006"
  "height\030\004 \001(\002\022\022\n\nconfidence\030\005 \001(\002\022\021\n\tland"
  "marks\030\006 \003(\002\"t\n\020DetectFaceStatus\"`\n\004Enum\022"
  "\024\n\020ENUM_UNSPECIFIED\020\000\022\013\n\007ENUM_OK\020\001\022\017\n\013EN"
  "UM_FAILED\020\002\022\021\n\rENUM_NO_FACES\020\003\022\021\n\rENUM_N"
  "O_MATCH\020\0042\225\001\n\026FaceRecognitionService\0228\n\013"
  "DetectFaces\022\023.DetectFacesRequest\032\024.Detec"
  "tFacesResponse\022A\n\016RecognizeFaces\022\026.Recog"
  "nizeFacesRequest\032\027.RecognizeFacesRespons"
  "eB\016Z\014/client;mainb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_service_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2eproto = {
    false, false, 745, descriptor_table_protodef_service_2eproto,
    "service.proto",
    &descriptor_table_service_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_service_2eproto::offsets,
    file_level_metadata_service_2eproto, file_level_enum_descriptors_service_2eproto,
    file_level_service_descriptors_service_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2eproto_getter() {
  return &descriptor_table_service_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2eproto(&descriptor_table_service_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectFaceStatus_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[0];
}
bool DetectFaceStatus_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DetectFaceStatus_Enum DetectFaceStatus::ENUM_UNSPECIFIED;
constexpr DetectFaceStatus_Enum DetectFaceStatus::ENUM_OK;
constexpr DetectFaceStatus_Enum DetectFaceStatus::ENUM_FAILED;
constexpr DetectFaceStatus_Enum DetectFaceStatus::ENUM_NO_FACES;
constexpr DetectFaceStatus_Enum DetectFaceStatus::ENUM_NO_MATCH;
constexpr DetectFaceStatus_Enum DetectFaceStatus::Enum_MIN;
constexpr DetectFaceStatus_Enum DetectFaceStatus::Enum_MAX;
constexpr int DetectFaceStatus::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RecognizeFacesRequest_Face::_Internal {
 public:
};

RecognizeFacesRequest_Face::RecognizeFacesRequest_Face(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RecognizeFacesRequest.Face)
}
RecognizeFacesRequest_Face::RecognizeFacesRequest_Face(const RecognizeFacesRequest_Face& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecognizeFacesRequest_Face* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.landmarks_){from._impl_.landmarks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RecognizeFacesRequest.Face)
}

inline void RecognizeFacesRequest_Face::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.landmarks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecognizeFacesRequest_Face::~RecognizeFacesRequest_Face() {
  // @@protoc_insertion_point(destructor:RecognizeFacesRequest.Face)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecognizeFacesRequest_Face::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.landmarks_.~RepeatedField();
}

void RecognizeFacesRequest_Face::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecognizeFacesRequest_Face::Clear() {
// @@protoc_insertion_point(message_clear_start:RecognizeFacesRequest.Face)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.landmarks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeFacesRequest_Face::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float landmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_landmarks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_landmarks(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognizeFacesRequest_Face::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecognizeFacesRequest.Face)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float landmarks = 1;
  if (this->_internal_landmarks_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_landmarks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecognizeFacesRequest.Face)
  return target;
}

size_t RecognizeFacesRequest_Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RecognizeFacesRequest.Face)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float landmarks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_landmarks_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognizeFacesRequest_Face::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecognizeFacesRequest_Face::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognizeFacesRequest_Face::GetClassData() const { return &_class_data_; }


void RecognizeFacesRequest_Face::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecognizeFacesRequest_Face*>(&to_msg);
  auto& from = static_cast<const RecognizeFacesRequest_Face&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RecognizeFacesRequest.Face)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.landmarks_.MergeFrom(from._impl_.landmarks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognizeFacesRequest_Face::CopyFrom(const RecognizeFacesRequest_Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RecognizeFacesRequest.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeFacesRequest_Face::IsInitialized() const {
  return true;
}

void RecognizeFacesRequest_Face::InternalSwap(RecognizeFacesRequest_Face* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.landmarks_.InternalSwap(&other->_impl_.landmarks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeFacesRequest_Face::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[0]);
}

// ===================================================================

class RecognizeFacesRequest::_Internal {
 public:
};

RecognizeFacesRequest::RecognizeFacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RecognizeFacesRequest)
}
RecognizeFacesRequest::RecognizeFacesRequest(const RecognizeFacesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecognizeFacesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.faces_){from._impl_.faces_}
    , decltype(_impl_.image_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RecognizeFacesRequest)
}

inline void RecognizeFacesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.faces_){arena}
    , decltype(_impl_.image_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecognizeFacesRequest::~RecognizeFacesRequest() {
  // @@protoc_insertion_point(destructor:RecognizeFacesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecognizeFacesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.faces_.~RepeatedPtrField();
  _impl_.image_.Destroy();
}

void RecognizeFacesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecognizeFacesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RecognizeFacesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.faces_.Clear();
  _impl_.image_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeFacesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RecognizeFacesRequest.Face faces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognizeFacesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecognizeFacesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RecognizeFacesRequest.Face faces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_faces_size()); i < n; i++) {
    const auto& repfield = this->_internal_faces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecognizeFacesRequest)
  return target;
}

size_t RecognizeFacesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RecognizeFacesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RecognizeFacesRequest.Face faces = 1;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->_impl_.faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognizeFacesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecognizeFacesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognizeFacesRequest::GetClassData() const { return &_class_data_; }


void RecognizeFacesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecognizeFacesRequest*>(&to_msg);
  auto& from = static_cast<const RecognizeFacesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RecognizeFacesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.faces_.MergeFrom(from._impl_.faces_);
  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognizeFacesRequest::CopyFrom(const RecognizeFacesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RecognizeFacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeFacesRequest::IsInitialized() const {
  return true;
}

void RecognizeFacesRequest::InternalSwap(RecognizeFacesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.faces_.InternalSwap(&other->_impl_.faces_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeFacesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[1]);
}

// ===================================================================

class RecognizeFacesResponse::_Internal {
 public:
};

RecognizeFacesResponse::RecognizeFacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RecognizeFacesResponse)
}
RecognizeFacesResponse::RecognizeFacesResponse(const RecognizeFacesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecognizeFacesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.valid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.valid_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.valid_));
  // @@protoc_insertion_point(copy_constructor:RecognizeFacesResponse)
}

inline void RecognizeFacesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , decltype(_impl_.valid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecognizeFacesResponse::~RecognizeFacesResponse() {
  // @@protoc_insertion_point(destructor:RecognizeFacesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecognizeFacesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecognizeFacesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecognizeFacesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RecognizeFacesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.valid_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.valid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeFacesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DetectFaceStatus.Enum status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::DetectFaceStatus_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      // bool valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognizeFacesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecognizeFacesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DetectFaceStatus.Enum status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // bool valid = 2;
  if (this->_internal_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecognizeFacesResponse)
  return target;
}

size_t RecognizeFacesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RecognizeFacesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DetectFaceStatus.Enum status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool valid = 2;
  if (this->_internal_valid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognizeFacesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecognizeFacesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognizeFacesResponse::GetClassData() const { return &_class_data_; }


void RecognizeFacesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecognizeFacesResponse*>(&to_msg);
  auto& from = static_cast<const RecognizeFacesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RecognizeFacesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_valid() != 0) {
    _this->_internal_set_valid(from._internal_valid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognizeFacesResponse::CopyFrom(const RecognizeFacesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RecognizeFacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeFacesResponse::IsInitialized() const {
  return true;
}

void RecognizeFacesResponse::InternalSwap(RecognizeFacesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognizeFacesResponse, _impl_.valid_)
      + sizeof(RecognizeFacesResponse::_impl_.valid_)
      - PROTOBUF_FIELD_OFFSET(RecognizeFacesResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeFacesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[2]);
}

// ===================================================================

class DetectFacesRequest::_Internal {
 public:
};

DetectFacesRequest::DetectFacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DetectFacesRequest)
}
DetectFacesRequest::DetectFacesRequest(const DetectFacesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectFacesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.images_){from._impl_.images_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DetectFacesRequest)
}

inline void DetectFacesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.images_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetectFacesRequest::~DetectFacesRequest() {
  // @@protoc_insertion_point(destructor:DetectFacesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectFacesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.images_.~RepeatedPtrField();
}

void DetectFacesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectFacesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectFacesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.images_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectFacesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes images = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_images();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectFacesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectFacesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes images = 1;
  for (int i = 0, n = this->_internal_images_size(); i < n; i++) {
    const auto& s = this->_internal_images(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectFacesRequest)
  return target;
}

size_t DetectFacesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectFacesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes images = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.images_.size());
  for (int i = 0, n = _impl_.images_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.images_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectFacesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectFacesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectFacesRequest::GetClassData() const { return &_class_data_; }


void DetectFacesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectFacesRequest*>(&to_msg);
  auto& from = static_cast<const DetectFacesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DetectFacesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.images_.MergeFrom(from._impl_.images_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectFacesRequest::CopyFrom(const DetectFacesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectFacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectFacesRequest::IsInitialized() const {
  return true;
}

void DetectFacesRequest::InternalSwap(DetectFacesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.images_.InternalSwap(&other->_impl_.images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectFacesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[3]);
}

// ===================================================================

class DetectFacesResponse_Face::_Internal {
 public:
};

DetectFacesResponse_Face::DetectFacesResponse_Face(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DetectFacesResponse.Face)
}
DetectFacesResponse_Face::DetectFacesResponse_Face(const DetectFacesResponse_Face& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectFacesResponse_Face* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.landmarks_){from._impl_.landmarks_}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.confidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:DetectFacesResponse.Face)
}

inline void DetectFacesResponse_Face::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.landmarks_){arena}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.confidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetectFacesResponse_Face::~DetectFacesResponse_Face() {
  // @@protoc_insertion_point(destructor:DetectFacesResponse.Face)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectFacesResponse_Face::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.landmarks_.~RepeatedField();
}

void DetectFacesResponse_Face::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectFacesResponse_Face::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectFacesResponse.Face)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.landmarks_.Clear();
  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectFacesResponse_Face::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float landmarks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_landmarks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_landmarks(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectFacesResponse_Face::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectFacesResponse.Face)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  // float confidence = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // repeated float landmarks = 6;
  if (this->_internal_landmarks_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_landmarks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectFacesResponse.Face)
  return target;
}

size_t DetectFacesResponse_Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectFacesResponse.Face)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float landmarks = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_landmarks_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  // float confidence = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectFacesResponse_Face::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectFacesResponse_Face::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectFacesResponse_Face::GetClassData() const { return &_class_data_; }


void DetectFacesResponse_Face::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectFacesResponse_Face*>(&to_msg);
  auto& from = static_cast<const DetectFacesResponse_Face&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DetectFacesResponse.Face)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.landmarks_.MergeFrom(from._impl_.landmarks_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectFacesResponse_Face::CopyFrom(const DetectFacesResponse_Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectFacesResponse.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectFacesResponse_Face::IsInitialized() const {
  return true;
}

void DetectFacesResponse_Face::InternalSwap(DetectFacesResponse_Face* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.landmarks_.InternalSwap(&other->_impl_.landmarks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectFacesResponse_Face, _impl_.confidence_)
      + sizeof(DetectFacesResponse_Face::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(DetectFacesResponse_Face, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectFacesResponse_Face::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[4]);
}

// ===================================================================

class DetectFacesResponse::_Internal {
 public:
};

DetectFacesResponse::DetectFacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DetectFacesResponse)
}
DetectFacesResponse::DetectFacesResponse(const DetectFacesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectFacesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.faces_){from._impl_.faces_}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:DetectFacesResponse)
}

inline void DetectFacesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.faces_){arena}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetectFacesResponse::~DetectFacesResponse() {
  // @@protoc_insertion_point(destructor:DetectFacesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectFacesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.faces_.~RepeatedPtrField();
}

void DetectFacesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectFacesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectFacesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.faces_.Clear();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectFacesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DetectFaceStatus.Enum status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::DetectFaceStatus_Enum>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .DetectFacesResponse.Face faces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectFacesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectFacesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DetectFaceStatus.Enum status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated .DetectFacesResponse.Face faces = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_faces_size()); i < n; i++) {
    const auto& repfield = this->_internal_faces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectFacesResponse)
  return target;
}

size_t DetectFacesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectFacesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DetectFacesResponse.Face faces = 2;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->_impl_.faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DetectFaceStatus.Enum status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectFacesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectFacesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectFacesResponse::GetClassData() const { return &_class_data_; }


void DetectFacesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectFacesResponse*>(&to_msg);
  auto& from = static_cast<const DetectFacesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DetectFacesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.faces_.MergeFrom(from._impl_.faces_);
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectFacesResponse::CopyFrom(const DetectFacesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectFacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectFacesResponse::IsInitialized() const {
  return true;
}

void DetectFacesResponse::InternalSwap(DetectFacesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.faces_.InternalSwap(&other->_impl_.faces_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectFacesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[5]);
}

// ===================================================================

class DetectFaceStatus::_Internal {
 public:
};

DetectFaceStatus::DetectFaceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DetectFaceStatus)
}
DetectFaceStatus::DetectFaceStatus(const DetectFaceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DetectFaceStatus* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DetectFaceStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectFaceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectFaceStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DetectFaceStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2eproto_getter, &descriptor_table_service_2eproto_once,
      file_level_metadata_service_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RecognizeFacesRequest_Face*
Arena::CreateMaybeMessage< ::RecognizeFacesRequest_Face >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RecognizeFacesRequest_Face >(arena);
}
template<> PROTOBUF_NOINLINE ::RecognizeFacesRequest*
Arena::CreateMaybeMessage< ::RecognizeFacesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RecognizeFacesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RecognizeFacesResponse*
Arena::CreateMaybeMessage< ::RecognizeFacesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RecognizeFacesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectFacesRequest*
Arena::CreateMaybeMessage< ::DetectFacesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DetectFacesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectFacesResponse_Face*
Arena::CreateMaybeMessage< ::DetectFacesResponse_Face >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DetectFacesResponse_Face >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectFacesResponse*
Arena::CreateMaybeMessage< ::DetectFacesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DetectFacesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectFaceStatus*
Arena::CreateMaybeMessage< ::DetectFaceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DetectFaceStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
