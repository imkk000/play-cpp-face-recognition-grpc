// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2eproto;
class DetectFaceStatus;
struct DetectFaceStatusDefaultTypeInternal;
extern DetectFaceStatusDefaultTypeInternal _DetectFaceStatus_default_instance_;
class DetectFacesRequest;
struct DetectFacesRequestDefaultTypeInternal;
extern DetectFacesRequestDefaultTypeInternal _DetectFacesRequest_default_instance_;
class DetectFacesResponse;
struct DetectFacesResponseDefaultTypeInternal;
extern DetectFacesResponseDefaultTypeInternal _DetectFacesResponse_default_instance_;
class DetectFacesResponse_Face;
struct DetectFacesResponse_FaceDefaultTypeInternal;
extern DetectFacesResponse_FaceDefaultTypeInternal _DetectFacesResponse_Face_default_instance_;
class RecognizeFacesRequest;
struct RecognizeFacesRequestDefaultTypeInternal;
extern RecognizeFacesRequestDefaultTypeInternal _RecognizeFacesRequest_default_instance_;
class RecognizeFacesRequest_Face;
struct RecognizeFacesRequest_FaceDefaultTypeInternal;
extern RecognizeFacesRequest_FaceDefaultTypeInternal _RecognizeFacesRequest_Face_default_instance_;
class RecognizeFacesResponse;
struct RecognizeFacesResponseDefaultTypeInternal;
extern RecognizeFacesResponseDefaultTypeInternal _RecognizeFacesResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DetectFaceStatus* Arena::CreateMaybeMessage<::DetectFaceStatus>(Arena*);
template<> ::DetectFacesRequest* Arena::CreateMaybeMessage<::DetectFacesRequest>(Arena*);
template<> ::DetectFacesResponse* Arena::CreateMaybeMessage<::DetectFacesResponse>(Arena*);
template<> ::DetectFacesResponse_Face* Arena::CreateMaybeMessage<::DetectFacesResponse_Face>(Arena*);
template<> ::RecognizeFacesRequest* Arena::CreateMaybeMessage<::RecognizeFacesRequest>(Arena*);
template<> ::RecognizeFacesRequest_Face* Arena::CreateMaybeMessage<::RecognizeFacesRequest_Face>(Arena*);
template<> ::RecognizeFacesResponse* Arena::CreateMaybeMessage<::RecognizeFacesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum DetectFaceStatus_Enum : int {
  DetectFaceStatus_Enum_ENUM_UNSPECIFIED = 0,
  DetectFaceStatus_Enum_ENUM_OK = 1,
  DetectFaceStatus_Enum_ENUM_FAILED = 2,
  DetectFaceStatus_Enum_ENUM_NO_FACES = 3,
  DetectFaceStatus_Enum_ENUM_NO_MATCH = 4,
  DetectFaceStatus_Enum_DetectFaceStatus_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DetectFaceStatus_Enum_DetectFaceStatus_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DetectFaceStatus_Enum_IsValid(int value);
constexpr DetectFaceStatus_Enum DetectFaceStatus_Enum_Enum_MIN = DetectFaceStatus_Enum_ENUM_UNSPECIFIED;
constexpr DetectFaceStatus_Enum DetectFaceStatus_Enum_Enum_MAX = DetectFaceStatus_Enum_ENUM_NO_MATCH;
constexpr int DetectFaceStatus_Enum_Enum_ARRAYSIZE = DetectFaceStatus_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectFaceStatus_Enum_descriptor();
template<typename T>
inline const std::string& DetectFaceStatus_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DetectFaceStatus_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DetectFaceStatus_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DetectFaceStatus_Enum_descriptor(), enum_t_value);
}
inline bool DetectFaceStatus_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DetectFaceStatus_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DetectFaceStatus_Enum>(
    DetectFaceStatus_Enum_descriptor(), name, value);
}
// ===================================================================

class RecognizeFacesRequest_Face final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RecognizeFacesRequest.Face) */ {
 public:
  inline RecognizeFacesRequest_Face() : RecognizeFacesRequest_Face(nullptr) {}
  ~RecognizeFacesRequest_Face() override;
  explicit PROTOBUF_CONSTEXPR RecognizeFacesRequest_Face(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognizeFacesRequest_Face(const RecognizeFacesRequest_Face& from);
  RecognizeFacesRequest_Face(RecognizeFacesRequest_Face&& from) noexcept
    : RecognizeFacesRequest_Face() {
    *this = ::std::move(from);
  }

  inline RecognizeFacesRequest_Face& operator=(const RecognizeFacesRequest_Face& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeFacesRequest_Face& operator=(RecognizeFacesRequest_Face&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeFacesRequest_Face& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeFacesRequest_Face* internal_default_instance() {
    return reinterpret_cast<const RecognizeFacesRequest_Face*>(
               &_RecognizeFacesRequest_Face_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecognizeFacesRequest_Face& a, RecognizeFacesRequest_Face& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeFacesRequest_Face* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeFacesRequest_Face* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeFacesRequest_Face* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognizeFacesRequest_Face>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognizeFacesRequest_Face& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognizeFacesRequest_Face& from) {
    RecognizeFacesRequest_Face::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeFacesRequest_Face* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RecognizeFacesRequest.Face";
  }
  protected:
  explicit RecognizeFacesRequest_Face(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarksFieldNumber = 1,
  };
  // repeated float landmarks = 1;
  int landmarks_size() const;
  private:
  int _internal_landmarks_size() const;
  public:
  void clear_landmarks();
  private:
  float _internal_landmarks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_landmarks() const;
  void _internal_add_landmarks(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_landmarks();
  public:
  float landmarks(int index) const;
  void set_landmarks(int index, float value);
  void add_landmarks(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      landmarks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_landmarks();

  // @@protoc_insertion_point(class_scope:RecognizeFacesRequest.Face)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > landmarks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class RecognizeFacesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RecognizeFacesRequest) */ {
 public:
  inline RecognizeFacesRequest() : RecognizeFacesRequest(nullptr) {}
  ~RecognizeFacesRequest() override;
  explicit PROTOBUF_CONSTEXPR RecognizeFacesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognizeFacesRequest(const RecognizeFacesRequest& from);
  RecognizeFacesRequest(RecognizeFacesRequest&& from) noexcept
    : RecognizeFacesRequest() {
    *this = ::std::move(from);
  }

  inline RecognizeFacesRequest& operator=(const RecognizeFacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeFacesRequest& operator=(RecognizeFacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeFacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeFacesRequest* internal_default_instance() {
    return reinterpret_cast<const RecognizeFacesRequest*>(
               &_RecognizeFacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecognizeFacesRequest& a, RecognizeFacesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeFacesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeFacesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeFacesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognizeFacesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognizeFacesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognizeFacesRequest& from) {
    RecognizeFacesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeFacesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RecognizeFacesRequest";
  }
  protected:
  explicit RecognizeFacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecognizeFacesRequest_Face Face;

  // accessors -------------------------------------------------------

  enum : int {
    kFacesFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // repeated .RecognizeFacesRequest.Face faces = 1;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  ::RecognizeFacesRequest_Face* mutable_faces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RecognizeFacesRequest_Face >*
      mutable_faces();
  private:
  const ::RecognizeFacesRequest_Face& _internal_faces(int index) const;
  ::RecognizeFacesRequest_Face* _internal_add_faces();
  public:
  const ::RecognizeFacesRequest_Face& faces(int index) const;
  ::RecognizeFacesRequest_Face* add_faces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RecognizeFacesRequest_Face >&
      faces() const;

  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:RecognizeFacesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RecognizeFacesRequest_Face > faces_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class RecognizeFacesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RecognizeFacesResponse) */ {
 public:
  inline RecognizeFacesResponse() : RecognizeFacesResponse(nullptr) {}
  ~RecognizeFacesResponse() override;
  explicit PROTOBUF_CONSTEXPR RecognizeFacesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognizeFacesResponse(const RecognizeFacesResponse& from);
  RecognizeFacesResponse(RecognizeFacesResponse&& from) noexcept
    : RecognizeFacesResponse() {
    *this = ::std::move(from);
  }

  inline RecognizeFacesResponse& operator=(const RecognizeFacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeFacesResponse& operator=(RecognizeFacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeFacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeFacesResponse* internal_default_instance() {
    return reinterpret_cast<const RecognizeFacesResponse*>(
               &_RecognizeFacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RecognizeFacesResponse& a, RecognizeFacesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeFacesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeFacesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeFacesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognizeFacesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognizeFacesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecognizeFacesResponse& from) {
    RecognizeFacesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeFacesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RecognizeFacesResponse";
  }
  protected:
  explicit RecognizeFacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kValidFieldNumber = 2,
  };
  // .DetectFaceStatus.Enum status = 1;
  void clear_status();
  ::DetectFaceStatus_Enum status() const;
  void set_status(::DetectFaceStatus_Enum value);
  private:
  ::DetectFaceStatus_Enum _internal_status() const;
  void _internal_set_status(::DetectFaceStatus_Enum value);
  public:

  // bool valid = 2;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RecognizeFacesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    bool valid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DetectFacesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectFacesRequest) */ {
 public:
  inline DetectFacesRequest() : DetectFacesRequest(nullptr) {}
  ~DetectFacesRequest() override;
  explicit PROTOBUF_CONSTEXPR DetectFacesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectFacesRequest(const DetectFacesRequest& from);
  DetectFacesRequest(DetectFacesRequest&& from) noexcept
    : DetectFacesRequest() {
    *this = ::std::move(from);
  }

  inline DetectFacesRequest& operator=(const DetectFacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectFacesRequest& operator=(DetectFacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectFacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectFacesRequest* internal_default_instance() {
    return reinterpret_cast<const DetectFacesRequest*>(
               &_DetectFacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DetectFacesRequest& a, DetectFacesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectFacesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectFacesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectFacesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectFacesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectFacesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetectFacesRequest& from) {
    DetectFacesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectFacesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectFacesRequest";
  }
  protected:
  explicit DetectFacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
  };
  // repeated bytes images = 1;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  const std::string& images(int index) const;
  std::string* mutable_images(int index);
  void set_images(int index, const std::string& value);
  void set_images(int index, std::string&& value);
  void set_images(int index, const char* value);
  void set_images(int index, const void* value, size_t size);
  std::string* add_images();
  void add_images(const std::string& value);
  void add_images(std::string&& value);
  void add_images(const char* value);
  void add_images(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& images() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_images();
  private:
  const std::string& _internal_images(int index) const;
  std::string* _internal_add_images();
  public:

  // @@protoc_insertion_point(class_scope:DetectFacesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> images_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DetectFacesResponse_Face final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectFacesResponse.Face) */ {
 public:
  inline DetectFacesResponse_Face() : DetectFacesResponse_Face(nullptr) {}
  ~DetectFacesResponse_Face() override;
  explicit PROTOBUF_CONSTEXPR DetectFacesResponse_Face(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectFacesResponse_Face(const DetectFacesResponse_Face& from);
  DetectFacesResponse_Face(DetectFacesResponse_Face&& from) noexcept
    : DetectFacesResponse_Face() {
    *this = ::std::move(from);
  }

  inline DetectFacesResponse_Face& operator=(const DetectFacesResponse_Face& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectFacesResponse_Face& operator=(DetectFacesResponse_Face&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectFacesResponse_Face& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectFacesResponse_Face* internal_default_instance() {
    return reinterpret_cast<const DetectFacesResponse_Face*>(
               &_DetectFacesResponse_Face_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DetectFacesResponse_Face& a, DetectFacesResponse_Face& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectFacesResponse_Face* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectFacesResponse_Face* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectFacesResponse_Face* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectFacesResponse_Face>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectFacesResponse_Face& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetectFacesResponse_Face& from) {
    DetectFacesResponse_Face::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectFacesResponse_Face* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectFacesResponse.Face";
  }
  protected:
  explicit DetectFacesResponse_Face(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarksFieldNumber = 6,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kConfidenceFieldNumber = 5,
  };
  // repeated float landmarks = 6;
  int landmarks_size() const;
  private:
  int _internal_landmarks_size() const;
  public:
  void clear_landmarks();
  private:
  float _internal_landmarks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_landmarks() const;
  void _internal_add_landmarks(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_landmarks();
  public:
  float landmarks(int index) const;
  void set_landmarks(int index, float value);
  void add_landmarks(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      landmarks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_landmarks();

  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float width = 3;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 4;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:DetectFacesResponse.Face)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > landmarks_;
    float x_;
    float y_;
    float width_;
    float height_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DetectFacesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetectFacesResponse) */ {
 public:
  inline DetectFacesResponse() : DetectFacesResponse(nullptr) {}
  ~DetectFacesResponse() override;
  explicit PROTOBUF_CONSTEXPR DetectFacesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectFacesResponse(const DetectFacesResponse& from);
  DetectFacesResponse(DetectFacesResponse&& from) noexcept
    : DetectFacesResponse() {
    *this = ::std::move(from);
  }

  inline DetectFacesResponse& operator=(const DetectFacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectFacesResponse& operator=(DetectFacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectFacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectFacesResponse* internal_default_instance() {
    return reinterpret_cast<const DetectFacesResponse*>(
               &_DetectFacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DetectFacesResponse& a, DetectFacesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectFacesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectFacesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectFacesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectFacesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectFacesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetectFacesResponse& from) {
    DetectFacesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectFacesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectFacesResponse";
  }
  protected:
  explicit DetectFacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DetectFacesResponse_Face Face;

  // accessors -------------------------------------------------------

  enum : int {
    kFacesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .DetectFacesResponse.Face faces = 2;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  ::DetectFacesResponse_Face* mutable_faces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetectFacesResponse_Face >*
      mutable_faces();
  private:
  const ::DetectFacesResponse_Face& _internal_faces(int index) const;
  ::DetectFacesResponse_Face* _internal_add_faces();
  public:
  const ::DetectFacesResponse_Face& faces(int index) const;
  ::DetectFacesResponse_Face* add_faces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetectFacesResponse_Face >&
      faces() const;

  // .DetectFaceStatus.Enum status = 1;
  void clear_status();
  ::DetectFaceStatus_Enum status() const;
  void set_status(::DetectFaceStatus_Enum value);
  private:
  ::DetectFaceStatus_Enum _internal_status() const;
  void _internal_set_status(::DetectFaceStatus_Enum value);
  public:

  // @@protoc_insertion_point(class_scope:DetectFacesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetectFacesResponse_Face > faces_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DetectFaceStatus final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:DetectFaceStatus) */ {
 public:
  inline DetectFaceStatus() : DetectFaceStatus(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DetectFaceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectFaceStatus(const DetectFaceStatus& from);
  DetectFaceStatus(DetectFaceStatus&& from) noexcept
    : DetectFaceStatus() {
    *this = ::std::move(from);
  }

  inline DetectFaceStatus& operator=(const DetectFaceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectFaceStatus& operator=(DetectFaceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectFaceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectFaceStatus* internal_default_instance() {
    return reinterpret_cast<const DetectFaceStatus*>(
               &_DetectFaceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DetectFaceStatus& a, DetectFaceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectFaceStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectFaceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectFaceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectFaceStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DetectFaceStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DetectFaceStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetectFaceStatus";
  }
  protected:
  explicit DetectFaceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DetectFaceStatus_Enum Enum;
  static constexpr Enum ENUM_UNSPECIFIED =
    DetectFaceStatus_Enum_ENUM_UNSPECIFIED;
  static constexpr Enum ENUM_OK =
    DetectFaceStatus_Enum_ENUM_OK;
  static constexpr Enum ENUM_FAILED =
    DetectFaceStatus_Enum_ENUM_FAILED;
  static constexpr Enum ENUM_NO_FACES =
    DetectFaceStatus_Enum_ENUM_NO_FACES;
  static constexpr Enum ENUM_NO_MATCH =
    DetectFaceStatus_Enum_ENUM_NO_MATCH;
  static inline bool Enum_IsValid(int value) {
    return DetectFaceStatus_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    DetectFaceStatus_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    DetectFaceStatus_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    DetectFaceStatus_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return DetectFaceStatus_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return DetectFaceStatus_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return DetectFaceStatus_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DetectFaceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_service_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecognizeFacesRequest_Face

// repeated float landmarks = 1;
inline int RecognizeFacesRequest_Face::_internal_landmarks_size() const {
  return _impl_.landmarks_.size();
}
inline int RecognizeFacesRequest_Face::landmarks_size() const {
  return _internal_landmarks_size();
}
inline void RecognizeFacesRequest_Face::clear_landmarks() {
  _impl_.landmarks_.Clear();
}
inline float RecognizeFacesRequest_Face::_internal_landmarks(int index) const {
  return _impl_.landmarks_.Get(index);
}
inline float RecognizeFacesRequest_Face::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:RecognizeFacesRequest.Face.landmarks)
  return _internal_landmarks(index);
}
inline void RecognizeFacesRequest_Face::set_landmarks(int index, float value) {
  _impl_.landmarks_.Set(index, value);
  // @@protoc_insertion_point(field_set:RecognizeFacesRequest.Face.landmarks)
}
inline void RecognizeFacesRequest_Face::_internal_add_landmarks(float value) {
  _impl_.landmarks_.Add(value);
}
inline void RecognizeFacesRequest_Face::add_landmarks(float value) {
  _internal_add_landmarks(value);
  // @@protoc_insertion_point(field_add:RecognizeFacesRequest.Face.landmarks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RecognizeFacesRequest_Face::_internal_landmarks() const {
  return _impl_.landmarks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RecognizeFacesRequest_Face::landmarks() const {
  // @@protoc_insertion_point(field_list:RecognizeFacesRequest.Face.landmarks)
  return _internal_landmarks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RecognizeFacesRequest_Face::_internal_mutable_landmarks() {
  return &_impl_.landmarks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RecognizeFacesRequest_Face::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:RecognizeFacesRequest.Face.landmarks)
  return _internal_mutable_landmarks();
}

// -------------------------------------------------------------------

// RecognizeFacesRequest

// repeated .RecognizeFacesRequest.Face faces = 1;
inline int RecognizeFacesRequest::_internal_faces_size() const {
  return _impl_.faces_.size();
}
inline int RecognizeFacesRequest::faces_size() const {
  return _internal_faces_size();
}
inline void RecognizeFacesRequest::clear_faces() {
  _impl_.faces_.Clear();
}
inline ::RecognizeFacesRequest_Face* RecognizeFacesRequest::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:RecognizeFacesRequest.faces)
  return _impl_.faces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RecognizeFacesRequest_Face >*
RecognizeFacesRequest::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:RecognizeFacesRequest.faces)
  return &_impl_.faces_;
}
inline const ::RecognizeFacesRequest_Face& RecognizeFacesRequest::_internal_faces(int index) const {
  return _impl_.faces_.Get(index);
}
inline const ::RecognizeFacesRequest_Face& RecognizeFacesRequest::faces(int index) const {
  // @@protoc_insertion_point(field_get:RecognizeFacesRequest.faces)
  return _internal_faces(index);
}
inline ::RecognizeFacesRequest_Face* RecognizeFacesRequest::_internal_add_faces() {
  return _impl_.faces_.Add();
}
inline ::RecognizeFacesRequest_Face* RecognizeFacesRequest::add_faces() {
  ::RecognizeFacesRequest_Face* _add = _internal_add_faces();
  // @@protoc_insertion_point(field_add:RecognizeFacesRequest.faces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RecognizeFacesRequest_Face >&
RecognizeFacesRequest::faces() const {
  // @@protoc_insertion_point(field_list:RecognizeFacesRequest.faces)
  return _impl_.faces_;
}

// bytes image = 2;
inline void RecognizeFacesRequest::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& RecognizeFacesRequest::image() const {
  // @@protoc_insertion_point(field_get:RecognizeFacesRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognizeFacesRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RecognizeFacesRequest.image)
}
inline std::string* RecognizeFacesRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:RecognizeFacesRequest.image)
  return _s;
}
inline const std::string& RecognizeFacesRequest::_internal_image() const {
  return _impl_.image_.Get();
}
inline void RecognizeFacesRequest::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognizeFacesRequest::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognizeFacesRequest::release_image() {
  // @@protoc_insertion_point(field_release:RecognizeFacesRequest.image)
  return _impl_.image_.Release();
}
inline void RecognizeFacesRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RecognizeFacesRequest.image)
}

// -------------------------------------------------------------------

// RecognizeFacesResponse

// .DetectFaceStatus.Enum status = 1;
inline void RecognizeFacesResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::DetectFaceStatus_Enum RecognizeFacesResponse::_internal_status() const {
  return static_cast< ::DetectFaceStatus_Enum >(_impl_.status_);
}
inline ::DetectFaceStatus_Enum RecognizeFacesResponse::status() const {
  // @@protoc_insertion_point(field_get:RecognizeFacesResponse.status)
  return _internal_status();
}
inline void RecognizeFacesResponse::_internal_set_status(::DetectFaceStatus_Enum value) {
  
  _impl_.status_ = value;
}
inline void RecognizeFacesResponse::set_status(::DetectFaceStatus_Enum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RecognizeFacesResponse.status)
}

// bool valid = 2;
inline void RecognizeFacesResponse::clear_valid() {
  _impl_.valid_ = false;
}
inline bool RecognizeFacesResponse::_internal_valid() const {
  return _impl_.valid_;
}
inline bool RecognizeFacesResponse::valid() const {
  // @@protoc_insertion_point(field_get:RecognizeFacesResponse.valid)
  return _internal_valid();
}
inline void RecognizeFacesResponse::_internal_set_valid(bool value) {
  
  _impl_.valid_ = value;
}
inline void RecognizeFacesResponse::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:RecognizeFacesResponse.valid)
}

// -------------------------------------------------------------------

// DetectFacesRequest

// repeated bytes images = 1;
inline int DetectFacesRequest::_internal_images_size() const {
  return _impl_.images_.size();
}
inline int DetectFacesRequest::images_size() const {
  return _internal_images_size();
}
inline void DetectFacesRequest::clear_images() {
  _impl_.images_.Clear();
}
inline std::string* DetectFacesRequest::add_images() {
  std::string* _s = _internal_add_images();
  // @@protoc_insertion_point(field_add_mutable:DetectFacesRequest.images)
  return _s;
}
inline const std::string& DetectFacesRequest::_internal_images(int index) const {
  return _impl_.images_.Get(index);
}
inline const std::string& DetectFacesRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:DetectFacesRequest.images)
  return _internal_images(index);
}
inline std::string* DetectFacesRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:DetectFacesRequest.images)
  return _impl_.images_.Mutable(index);
}
inline void DetectFacesRequest::set_images(int index, const std::string& value) {
  _impl_.images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DetectFacesRequest.images)
}
inline void DetectFacesRequest::set_images(int index, std::string&& value) {
  _impl_.images_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DetectFacesRequest.images)
}
inline void DetectFacesRequest::set_images(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DetectFacesRequest.images)
}
inline void DetectFacesRequest::set_images(int index, const void* value, size_t size) {
  _impl_.images_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DetectFacesRequest.images)
}
inline std::string* DetectFacesRequest::_internal_add_images() {
  return _impl_.images_.Add();
}
inline void DetectFacesRequest::add_images(const std::string& value) {
  _impl_.images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DetectFacesRequest.images)
}
inline void DetectFacesRequest::add_images(std::string&& value) {
  _impl_.images_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DetectFacesRequest.images)
}
inline void DetectFacesRequest::add_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DetectFacesRequest.images)
}
inline void DetectFacesRequest::add_images(const void* value, size_t size) {
  _impl_.images_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DetectFacesRequest.images)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DetectFacesRequest::images() const {
  // @@protoc_insertion_point(field_list:DetectFacesRequest.images)
  return _impl_.images_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DetectFacesRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:DetectFacesRequest.images)
  return &_impl_.images_;
}

// -------------------------------------------------------------------

// DetectFacesResponse_Face

// float x = 1;
inline void DetectFacesResponse_Face::clear_x() {
  _impl_.x_ = 0;
}
inline float DetectFacesResponse_Face::_internal_x() const {
  return _impl_.x_;
}
inline float DetectFacesResponse_Face::x() const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.Face.x)
  return _internal_x();
}
inline void DetectFacesResponse_Face::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void DetectFacesResponse_Face::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DetectFacesResponse.Face.x)
}

// float y = 2;
inline void DetectFacesResponse_Face::clear_y() {
  _impl_.y_ = 0;
}
inline float DetectFacesResponse_Face::_internal_y() const {
  return _impl_.y_;
}
inline float DetectFacesResponse_Face::y() const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.Face.y)
  return _internal_y();
}
inline void DetectFacesResponse_Face::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void DetectFacesResponse_Face::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DetectFacesResponse.Face.y)
}

// float width = 3;
inline void DetectFacesResponse_Face::clear_width() {
  _impl_.width_ = 0;
}
inline float DetectFacesResponse_Face::_internal_width() const {
  return _impl_.width_;
}
inline float DetectFacesResponse_Face::width() const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.Face.width)
  return _internal_width();
}
inline void DetectFacesResponse_Face::_internal_set_width(float value) {
  
  _impl_.width_ = value;
}
inline void DetectFacesResponse_Face::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:DetectFacesResponse.Face.width)
}

// float height = 4;
inline void DetectFacesResponse_Face::clear_height() {
  _impl_.height_ = 0;
}
inline float DetectFacesResponse_Face::_internal_height() const {
  return _impl_.height_;
}
inline float DetectFacesResponse_Face::height() const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.Face.height)
  return _internal_height();
}
inline void DetectFacesResponse_Face::_internal_set_height(float value) {
  
  _impl_.height_ = value;
}
inline void DetectFacesResponse_Face::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DetectFacesResponse.Face.height)
}

// float confidence = 5;
inline void DetectFacesResponse_Face::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float DetectFacesResponse_Face::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float DetectFacesResponse_Face::confidence() const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.Face.confidence)
  return _internal_confidence();
}
inline void DetectFacesResponse_Face::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void DetectFacesResponse_Face::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:DetectFacesResponse.Face.confidence)
}

// repeated float landmarks = 6;
inline int DetectFacesResponse_Face::_internal_landmarks_size() const {
  return _impl_.landmarks_.size();
}
inline int DetectFacesResponse_Face::landmarks_size() const {
  return _internal_landmarks_size();
}
inline void DetectFacesResponse_Face::clear_landmarks() {
  _impl_.landmarks_.Clear();
}
inline float DetectFacesResponse_Face::_internal_landmarks(int index) const {
  return _impl_.landmarks_.Get(index);
}
inline float DetectFacesResponse_Face::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.Face.landmarks)
  return _internal_landmarks(index);
}
inline void DetectFacesResponse_Face::set_landmarks(int index, float value) {
  _impl_.landmarks_.Set(index, value);
  // @@protoc_insertion_point(field_set:DetectFacesResponse.Face.landmarks)
}
inline void DetectFacesResponse_Face::_internal_add_landmarks(float value) {
  _impl_.landmarks_.Add(value);
}
inline void DetectFacesResponse_Face::add_landmarks(float value) {
  _internal_add_landmarks(value);
  // @@protoc_insertion_point(field_add:DetectFacesResponse.Face.landmarks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectFacesResponse_Face::_internal_landmarks() const {
  return _impl_.landmarks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectFacesResponse_Face::landmarks() const {
  // @@protoc_insertion_point(field_list:DetectFacesResponse.Face.landmarks)
  return _internal_landmarks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectFacesResponse_Face::_internal_mutable_landmarks() {
  return &_impl_.landmarks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectFacesResponse_Face::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:DetectFacesResponse.Face.landmarks)
  return _internal_mutable_landmarks();
}

// -------------------------------------------------------------------

// DetectFacesResponse

// .DetectFaceStatus.Enum status = 1;
inline void DetectFacesResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::DetectFaceStatus_Enum DetectFacesResponse::_internal_status() const {
  return static_cast< ::DetectFaceStatus_Enum >(_impl_.status_);
}
inline ::DetectFaceStatus_Enum DetectFacesResponse::status() const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.status)
  return _internal_status();
}
inline void DetectFacesResponse::_internal_set_status(::DetectFaceStatus_Enum value) {
  
  _impl_.status_ = value;
}
inline void DetectFacesResponse::set_status(::DetectFaceStatus_Enum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DetectFacesResponse.status)
}

// repeated .DetectFacesResponse.Face faces = 2;
inline int DetectFacesResponse::_internal_faces_size() const {
  return _impl_.faces_.size();
}
inline int DetectFacesResponse::faces_size() const {
  return _internal_faces_size();
}
inline void DetectFacesResponse::clear_faces() {
  _impl_.faces_.Clear();
}
inline ::DetectFacesResponse_Face* DetectFacesResponse::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:DetectFacesResponse.faces)
  return _impl_.faces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetectFacesResponse_Face >*
DetectFacesResponse::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:DetectFacesResponse.faces)
  return &_impl_.faces_;
}
inline const ::DetectFacesResponse_Face& DetectFacesResponse::_internal_faces(int index) const {
  return _impl_.faces_.Get(index);
}
inline const ::DetectFacesResponse_Face& DetectFacesResponse::faces(int index) const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.faces)
  return _internal_faces(index);
}
inline ::DetectFacesResponse_Face* DetectFacesResponse::_internal_add_faces() {
  return _impl_.faces_.Add();
}
inline ::DetectFacesResponse_Face* DetectFacesResponse::add_faces() {
  ::DetectFacesResponse_Face* _add = _internal_add_faces();
  // @@protoc_insertion_point(field_add:DetectFacesResponse.faces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetectFacesResponse_Face >&
DetectFacesResponse::faces() const {
  // @@protoc_insertion_point(field_list:DetectFacesResponse.faces)
  return _impl_.faces_;
}

// -------------------------------------------------------------------

// DetectFaceStatus

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DetectFaceStatus_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DetectFaceStatus_Enum>() {
  return ::DetectFaceStatus_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2eproto
