// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: service.proto
// Protobuf C++ Version: 5.29.3

#ifndef service_2eproto_2epb_2eh
#define service_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_service_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_service_2eproto;
class DetectFaceStatus;
struct DetectFaceStatusDefaultTypeInternal;
extern DetectFaceStatusDefaultTypeInternal _DetectFaceStatus_default_instance_;
class DetectFacesRequest;
struct DetectFacesRequestDefaultTypeInternal;
extern DetectFacesRequestDefaultTypeInternal _DetectFacesRequest_default_instance_;
class DetectFacesResponse;
struct DetectFacesResponseDefaultTypeInternal;
extern DetectFacesResponseDefaultTypeInternal _DetectFacesResponse_default_instance_;
class Face;
struct FaceDefaultTypeInternal;
extern FaceDefaultTypeInternal _Face_default_instance_;
class RecognizeFacesRequest;
struct RecognizeFacesRequestDefaultTypeInternal;
extern RecognizeFacesRequestDefaultTypeInternal _RecognizeFacesRequest_default_instance_;
class RecognizeFacesResponse;
struct RecognizeFacesResponseDefaultTypeInternal;
extern RecognizeFacesResponseDefaultTypeInternal _RecognizeFacesResponse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum DetectFaceStatus_Enum : int {
  DetectFaceStatus_Enum_ENUM_UNSPECIFIED = 0,
  DetectFaceStatus_Enum_ENUM_OK = 1,
  DetectFaceStatus_Enum_ENUM_FAILED = 2,
  DetectFaceStatus_Enum_ENUM_NO_FACES = 3,
  DetectFaceStatus_Enum_ENUM_NO_MATCH = 4,
  DetectFaceStatus_Enum_DetectFaceStatus_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DetectFaceStatus_Enum_DetectFaceStatus_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DetectFaceStatus_Enum_IsValid(int value);
extern const uint32_t DetectFaceStatus_Enum_internal_data_[];
constexpr DetectFaceStatus_Enum DetectFaceStatus_Enum_Enum_MIN = static_cast<DetectFaceStatus_Enum>(0);
constexpr DetectFaceStatus_Enum DetectFaceStatus_Enum_Enum_MAX = static_cast<DetectFaceStatus_Enum>(4);
constexpr int DetectFaceStatus_Enum_Enum_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
DetectFaceStatus_Enum_descriptor();
template <typename T>
const std::string& DetectFaceStatus_Enum_Name(T value) {
  static_assert(std::is_same<T, DetectFaceStatus_Enum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Enum_Name().");
  return DetectFaceStatus_Enum_Name(static_cast<DetectFaceStatus_Enum>(value));
}
template <>
inline const std::string& DetectFaceStatus_Enum_Name(DetectFaceStatus_Enum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DetectFaceStatus_Enum_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool DetectFaceStatus_Enum_Parse(absl::string_view name, DetectFaceStatus_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectFaceStatus_Enum>(
      DetectFaceStatus_Enum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RecognizeFacesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RecognizeFacesResponse) */ {
 public:
  inline RecognizeFacesResponse() : RecognizeFacesResponse(nullptr) {}
  ~RecognizeFacesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognizeFacesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognizeFacesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognizeFacesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognizeFacesResponse(const RecognizeFacesResponse& from) : RecognizeFacesResponse(nullptr, from) {}
  inline RecognizeFacesResponse(RecognizeFacesResponse&& from) noexcept
      : RecognizeFacesResponse(nullptr, std::move(from)) {}
  inline RecognizeFacesResponse& operator=(const RecognizeFacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeFacesResponse& operator=(RecognizeFacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeFacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeFacesResponse* internal_default_instance() {
    return reinterpret_cast<const RecognizeFacesResponse*>(
        &_RecognizeFacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RecognizeFacesResponse& a, RecognizeFacesResponse& b) { a.Swap(&b); }
  inline void Swap(RecognizeFacesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeFacesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeFacesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognizeFacesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognizeFacesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognizeFacesResponse& from) { RecognizeFacesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognizeFacesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RecognizeFacesResponse"; }

 protected:
  explicit RecognizeFacesResponse(::google::protobuf::Arena* arena);
  RecognizeFacesResponse(::google::protobuf::Arena* arena, const RecognizeFacesResponse& from);
  RecognizeFacesResponse(::google::protobuf::Arena* arena, RecognizeFacesResponse&& from) noexcept
      : RecognizeFacesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
    kValidFieldNumber = 2,
  };
  // .DetectFaceStatus.Enum status = 1;
  void clear_status() ;
  ::DetectFaceStatus_Enum status() const;
  void set_status(::DetectFaceStatus_Enum value);

  private:
  ::DetectFaceStatus_Enum _internal_status() const;
  void _internal_set_status(::DetectFaceStatus_Enum value);

  public:
  // bool valid = 2;
  void clear_valid() ;
  bool valid() const;
  void set_valid(bool value);

  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RecognizeFacesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognizeFacesResponse& from_msg);
    int status_;
    bool valid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class Face final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Face) */ {
 public:
  inline Face() : Face(nullptr) {}
  ~Face() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Face* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Face));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Face(
      ::google::protobuf::internal::ConstantInitialized);

  inline Face(const Face& from) : Face(nullptr, from) {}
  inline Face(Face&& from) noexcept
      : Face(nullptr, std::move(from)) {}
  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }
  inline Face& operator=(Face&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Face& default_instance() {
    return *internal_default_instance();
  }
  static inline const Face* internal_default_instance() {
    return reinterpret_cast<const Face*>(
        &_Face_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Face& a, Face& b) { a.Swap(&b); }
  inline void Swap(Face* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Face* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Face* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Face>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Face& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Face& from) { Face::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Face* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Face"; }

 protected:
  explicit Face(::google::protobuf::Arena* arena);
  Face(::google::protobuf::Arena* arena, const Face& from);
  Face(::google::protobuf::Arena* arena, Face&& from) noexcept
      : Face(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLandmarksFieldNumber = 1,
  };
  // repeated float landmarks = 1;
  int landmarks_size() const;
  private:
  int _internal_landmarks_size() const;

  public:
  void clear_landmarks() ;
  float landmarks(int index) const;
  void set_landmarks(int index, float value);
  void add_landmarks(float value);
  const ::google::protobuf::RepeatedField<float>& landmarks() const;
  ::google::protobuf::RepeatedField<float>* mutable_landmarks();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_landmarks() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_landmarks();

  public:
  // @@protoc_insertion_point(class_scope:Face)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Face& from_msg);
    ::google::protobuf::RepeatedField<float> landmarks_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DetectFacesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DetectFacesRequest) */ {
 public:
  inline DetectFacesRequest() : DetectFacesRequest(nullptr) {}
  ~DetectFacesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DetectFacesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DetectFacesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DetectFacesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DetectFacesRequest(const DetectFacesRequest& from) : DetectFacesRequest(nullptr, from) {}
  inline DetectFacesRequest(DetectFacesRequest&& from) noexcept
      : DetectFacesRequest(nullptr, std::move(from)) {}
  inline DetectFacesRequest& operator=(const DetectFacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectFacesRequest& operator=(DetectFacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectFacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectFacesRequest* internal_default_instance() {
    return reinterpret_cast<const DetectFacesRequest*>(
        &_DetectFacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DetectFacesRequest& a, DetectFacesRequest& b) { a.Swap(&b); }
  inline void Swap(DetectFacesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectFacesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectFacesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DetectFacesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DetectFacesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DetectFacesRequest& from) { DetectFacesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DetectFacesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "DetectFacesRequest"; }

 protected:
  explicit DetectFacesRequest(::google::protobuf::Arena* arena);
  DetectFacesRequest(::google::protobuf::Arena* arena, const DetectFacesRequest& from);
  DetectFacesRequest(::google::protobuf::Arena* arena, DetectFacesRequest&& from) noexcept
      : DetectFacesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImagesFieldNumber = 1,
  };
  // repeated bytes images = 1;
  int images_size() const;
  private:
  int _internal_images_size() const;

  public:
  void clear_images() ;
  const std::string& images(int index) const;
  std::string* mutable_images(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_images(int index, Arg_&& value, Args_... args);
  std::string* add_images();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_images(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& images() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_images();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_images() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_images();

  public:
  // @@protoc_insertion_point(class_scope:DetectFacesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DetectFacesRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> images_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DetectFaceStatus final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:DetectFaceStatus) */ {
 public:
  inline DetectFaceStatus() : DetectFaceStatus(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DetectFaceStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DetectFaceStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DetectFaceStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline DetectFaceStatus(const DetectFaceStatus& from) : DetectFaceStatus(nullptr, from) {}
  inline DetectFaceStatus(DetectFaceStatus&& from) noexcept
      : DetectFaceStatus(nullptr, std::move(from)) {}
  inline DetectFaceStatus& operator=(const DetectFaceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectFaceStatus& operator=(DetectFaceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectFaceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectFaceStatus* internal_default_instance() {
    return reinterpret_cast<const DetectFaceStatus*>(
        &_DetectFaceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(DetectFaceStatus& a, DetectFaceStatus& b) { a.Swap(&b); }
  inline void Swap(DetectFaceStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectFaceStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectFaceStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<DetectFaceStatus>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DetectFaceStatus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DetectFaceStatus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "DetectFaceStatus"; }

 protected:
  explicit DetectFaceStatus(::google::protobuf::Arena* arena);
  DetectFaceStatus(::google::protobuf::Arena* arena, const DetectFaceStatus& from);
  DetectFaceStatus(::google::protobuf::Arena* arena, DetectFaceStatus&& from) noexcept
      : DetectFaceStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Enum = DetectFaceStatus_Enum;
  static constexpr Enum ENUM_UNSPECIFIED = DetectFaceStatus_Enum_ENUM_UNSPECIFIED;
  static constexpr Enum ENUM_OK = DetectFaceStatus_Enum_ENUM_OK;
  static constexpr Enum ENUM_FAILED = DetectFaceStatus_Enum_ENUM_FAILED;
  static constexpr Enum ENUM_NO_FACES = DetectFaceStatus_Enum_ENUM_NO_FACES;
  static constexpr Enum ENUM_NO_MATCH = DetectFaceStatus_Enum_ENUM_NO_MATCH;
  static inline bool Enum_IsValid(int value) {
    return DetectFaceStatus_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN = DetectFaceStatus_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX = DetectFaceStatus_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE = DetectFaceStatus_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
    return DetectFaceStatus_Enum_descriptor();
  }
  template <typename T>
  static inline const std::string& Enum_Name(T value) {
    return DetectFaceStatus_Enum_Name(value);
  }
  static inline bool Enum_Parse(absl::string_view name, Enum* value) {
    return DetectFaceStatus_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:DetectFaceStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DetectFaceStatus& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class RecognizeFacesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RecognizeFacesRequest) */ {
 public:
  inline RecognizeFacesRequest() : RecognizeFacesRequest(nullptr) {}
  ~RecognizeFacesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognizeFacesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognizeFacesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognizeFacesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognizeFacesRequest(const RecognizeFacesRequest& from) : RecognizeFacesRequest(nullptr, from) {}
  inline RecognizeFacesRequest(RecognizeFacesRequest&& from) noexcept
      : RecognizeFacesRequest(nullptr, std::move(from)) {}
  inline RecognizeFacesRequest& operator=(const RecognizeFacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeFacesRequest& operator=(RecognizeFacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeFacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeFacesRequest* internal_default_instance() {
    return reinterpret_cast<const RecognizeFacesRequest*>(
        &_RecognizeFacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RecognizeFacesRequest& a, RecognizeFacesRequest& b) { a.Swap(&b); }
  inline void Swap(RecognizeFacesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeFacesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeFacesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognizeFacesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognizeFacesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognizeFacesRequest& from) { RecognizeFacesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognizeFacesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RecognizeFacesRequest"; }

 protected:
  explicit RecognizeFacesRequest(::google::protobuf::Arena* arena);
  RecognizeFacesRequest(::google::protobuf::Arena* arena, const RecognizeFacesRequest& from);
  RecognizeFacesRequest(::google::protobuf::Arena* arena, RecognizeFacesRequest&& from) noexcept
      : RecognizeFacesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFacesFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // repeated .Face faces = 1;
  int faces_size() const;
  private:
  int _internal_faces_size() const;

  public:
  void clear_faces() ;
  ::Face* mutable_faces(int index);
  ::google::protobuf::RepeatedPtrField<::Face>* mutable_faces();

  private:
  const ::google::protobuf::RepeatedPtrField<::Face>& _internal_faces() const;
  ::google::protobuf::RepeatedPtrField<::Face>* _internal_mutable_faces();
  public:
  const ::Face& faces(int index) const;
  ::Face* add_faces();
  const ::google::protobuf::RepeatedPtrField<::Face>& faces() const;
  // bytes image = 2;
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // @@protoc_insertion_point(class_scope:RecognizeFacesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognizeFacesRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::Face > faces_;
    ::google::protobuf::internal::ArenaStringPtr image_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class DetectFacesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DetectFacesResponse) */ {
 public:
  inline DetectFacesResponse() : DetectFacesResponse(nullptr) {}
  ~DetectFacesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DetectFacesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DetectFacesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DetectFacesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DetectFacesResponse(const DetectFacesResponse& from) : DetectFacesResponse(nullptr, from) {}
  inline DetectFacesResponse(DetectFacesResponse&& from) noexcept
      : DetectFacesResponse(nullptr, std::move(from)) {}
  inline DetectFacesResponse& operator=(const DetectFacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectFacesResponse& operator=(DetectFacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectFacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectFacesResponse* internal_default_instance() {
    return reinterpret_cast<const DetectFacesResponse*>(
        &_DetectFacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DetectFacesResponse& a, DetectFacesResponse& b) { a.Swap(&b); }
  inline void Swap(DetectFacesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectFacesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectFacesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DetectFacesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DetectFacesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DetectFacesResponse& from) { DetectFacesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DetectFacesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "DetectFacesResponse"; }

 protected:
  explicit DetectFacesResponse(::google::protobuf::Arena* arena);
  DetectFacesResponse(::google::protobuf::Arena* arena, const DetectFacesResponse& from);
  DetectFacesResponse(::google::protobuf::Arena* arena, DetectFacesResponse&& from) noexcept
      : DetectFacesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFacesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .Face faces = 2;
  int faces_size() const;
  private:
  int _internal_faces_size() const;

  public:
  void clear_faces() ;
  ::Face* mutable_faces(int index);
  ::google::protobuf::RepeatedPtrField<::Face>* mutable_faces();

  private:
  const ::google::protobuf::RepeatedPtrField<::Face>& _internal_faces() const;
  ::google::protobuf::RepeatedPtrField<::Face>* _internal_mutable_faces();
  public:
  const ::Face& faces(int index) const;
  ::Face* add_faces();
  const ::google::protobuf::RepeatedPtrField<::Face>& faces() const;
  // .DetectFaceStatus.Enum status = 1;
  void clear_status() ;
  ::DetectFaceStatus_Enum status() const;
  void set_status(::DetectFaceStatus_Enum value);

  private:
  ::DetectFaceStatus_Enum _internal_status() const;
  void _internal_set_status(::DetectFaceStatus_Enum value);

  public:
  // @@protoc_insertion_point(class_scope:DetectFacesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DetectFacesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::Face > faces_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RecognizeFacesRequest

// repeated .Face faces = 1;
inline int RecognizeFacesRequest::_internal_faces_size() const {
  return _internal_faces().size();
}
inline int RecognizeFacesRequest::faces_size() const {
  return _internal_faces_size();
}
inline void RecognizeFacesRequest::clear_faces() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.faces_.Clear();
}
inline ::Face* RecognizeFacesRequest::mutable_faces(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:RecognizeFacesRequest.faces)
  return _internal_mutable_faces()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Face>* RecognizeFacesRequest::mutable_faces()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:RecognizeFacesRequest.faces)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_faces();
}
inline const ::Face& RecognizeFacesRequest::faces(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RecognizeFacesRequest.faces)
  return _internal_faces().Get(index);
}
inline ::Face* RecognizeFacesRequest::add_faces() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Face* _add = _internal_mutable_faces()->Add();
  // @@protoc_insertion_point(field_add:RecognizeFacesRequest.faces)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Face>& RecognizeFacesRequest::faces() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:RecognizeFacesRequest.faces)
  return _internal_faces();
}
inline const ::google::protobuf::RepeatedPtrField<::Face>&
RecognizeFacesRequest::_internal_faces() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.faces_;
}
inline ::google::protobuf::RepeatedPtrField<::Face>*
RecognizeFacesRequest::_internal_mutable_faces() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.faces_;
}

// bytes image = 2;
inline void RecognizeFacesRequest::clear_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& RecognizeFacesRequest::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RecognizeFacesRequest.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecognizeFacesRequest::set_image(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RecognizeFacesRequest.image)
}
inline std::string* RecognizeFacesRequest::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:RecognizeFacesRequest.image)
  return _s;
}
inline const std::string& RecognizeFacesRequest::_internal_image() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.image_.Get();
}
inline void RecognizeFacesRequest::_internal_set_image(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.Set(value, GetArena());
}
inline std::string* RecognizeFacesRequest::_internal_mutable_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* RecognizeFacesRequest::release_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RecognizeFacesRequest.image)
  return _impl_.image_.Release();
}
inline void RecognizeFacesRequest::set_allocated_image(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:RecognizeFacesRequest.image)
}

// -------------------------------------------------------------------

// RecognizeFacesResponse

// .DetectFaceStatus.Enum status = 1;
inline void RecognizeFacesResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::DetectFaceStatus_Enum RecognizeFacesResponse::status() const {
  // @@protoc_insertion_point(field_get:RecognizeFacesResponse.status)
  return _internal_status();
}
inline void RecognizeFacesResponse::set_status(::DetectFaceStatus_Enum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RecognizeFacesResponse.status)
}
inline ::DetectFaceStatus_Enum RecognizeFacesResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::DetectFaceStatus_Enum>(_impl_.status_);
}
inline void RecognizeFacesResponse::_internal_set_status(::DetectFaceStatus_Enum value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// bool valid = 2;
inline void RecognizeFacesResponse::clear_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.valid_ = false;
}
inline bool RecognizeFacesResponse::valid() const {
  // @@protoc_insertion_point(field_get:RecognizeFacesResponse.valid)
  return _internal_valid();
}
inline void RecognizeFacesResponse::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:RecognizeFacesResponse.valid)
}
inline bool RecognizeFacesResponse::_internal_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.valid_;
}
inline void RecognizeFacesResponse::_internal_set_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.valid_ = value;
}

// -------------------------------------------------------------------

// DetectFacesRequest

// repeated bytes images = 1;
inline int DetectFacesRequest::_internal_images_size() const {
  return _internal_images().size();
}
inline int DetectFacesRequest::images_size() const {
  return _internal_images_size();
}
inline void DetectFacesRequest::clear_images() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.images_.Clear();
}
inline std::string* DetectFacesRequest::add_images() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_images()->Add();
  // @@protoc_insertion_point(field_add_mutable:DetectFacesRequest.images)
  return _s;
}
inline const std::string& DetectFacesRequest::images(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DetectFacesRequest.images)
  return _internal_images().Get(index);
}
inline std::string* DetectFacesRequest::mutable_images(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:DetectFacesRequest.images)
  return _internal_mutable_images()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void DetectFacesRequest::set_images(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_images()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:DetectFacesRequest.images)
}
template <typename Arg_, typename... Args_>
inline void DetectFacesRequest::add_images(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_images(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:DetectFacesRequest.images)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DetectFacesRequest::images() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:DetectFacesRequest.images)
  return _internal_images();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DetectFacesRequest::mutable_images() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:DetectFacesRequest.images)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_images();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DetectFacesRequest::_internal_images() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.images_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DetectFacesRequest::_internal_mutable_images() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.images_;
}

// -------------------------------------------------------------------

// DetectFacesResponse

// .DetectFaceStatus.Enum status = 1;
inline void DetectFacesResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::DetectFaceStatus_Enum DetectFacesResponse::status() const {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.status)
  return _internal_status();
}
inline void DetectFacesResponse::set_status(::DetectFaceStatus_Enum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DetectFacesResponse.status)
}
inline ::DetectFaceStatus_Enum DetectFacesResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::DetectFaceStatus_Enum>(_impl_.status_);
}
inline void DetectFacesResponse::_internal_set_status(::DetectFaceStatus_Enum value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// repeated .Face faces = 2;
inline int DetectFacesResponse::_internal_faces_size() const {
  return _internal_faces().size();
}
inline int DetectFacesResponse::faces_size() const {
  return _internal_faces_size();
}
inline void DetectFacesResponse::clear_faces() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.faces_.Clear();
}
inline ::Face* DetectFacesResponse::mutable_faces(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:DetectFacesResponse.faces)
  return _internal_mutable_faces()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Face>* DetectFacesResponse::mutable_faces()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:DetectFacesResponse.faces)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_faces();
}
inline const ::Face& DetectFacesResponse::faces(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DetectFacesResponse.faces)
  return _internal_faces().Get(index);
}
inline ::Face* DetectFacesResponse::add_faces() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Face* _add = _internal_mutable_faces()->Add();
  // @@protoc_insertion_point(field_add:DetectFacesResponse.faces)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Face>& DetectFacesResponse::faces() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:DetectFacesResponse.faces)
  return _internal_faces();
}
inline const ::google::protobuf::RepeatedPtrField<::Face>&
DetectFacesResponse::_internal_faces() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.faces_;
}
inline ::google::protobuf::RepeatedPtrField<::Face>*
DetectFacesResponse::_internal_mutable_faces() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.faces_;
}

// -------------------------------------------------------------------

// DetectFaceStatus

// -------------------------------------------------------------------

// Face

// repeated float landmarks = 1;
inline int Face::_internal_landmarks_size() const {
  return _internal_landmarks().size();
}
inline int Face::landmarks_size() const {
  return _internal_landmarks_size();
}
inline void Face::clear_landmarks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.landmarks_.Clear();
}
inline float Face::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:Face.landmarks)
  return _internal_landmarks().Get(index);
}
inline void Face::set_landmarks(int index, float value) {
  _internal_mutable_landmarks()->Set(index, value);
  // @@protoc_insertion_point(field_set:Face.landmarks)
}
inline void Face::add_landmarks(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_landmarks()->Add(value);
  // @@protoc_insertion_point(field_add:Face.landmarks)
}
inline const ::google::protobuf::RepeatedField<float>& Face::landmarks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Face.landmarks)
  return _internal_landmarks();
}
inline ::google::protobuf::RepeatedField<float>* Face::mutable_landmarks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Face.landmarks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_landmarks();
}
inline const ::google::protobuf::RepeatedField<float>&
Face::_internal_landmarks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.landmarks_;
}
inline ::google::protobuf::RepeatedField<float>* Face::_internal_mutable_landmarks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.landmarks_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::DetectFaceStatus_Enum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::DetectFaceStatus_Enum>() {
  return ::DetectFaceStatus_Enum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // service_2eproto_2epb_2eh
